@page "/fetchdata"
@using Components.Advanced.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<img src="/_content/Components.Library/background.png" />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ListView Items="forecasts">
        <ItemTemplate>
            @forecastTemplate(context)
        </ItemTemplate>
    </ListView>


    <Grid Items="forecasts" TItem="WeatherForecast">
        <Header>
        <th>Date</th>
        <th>Temp. (C)</th>
        <th>Temp. (F)</th>
        <th>Summary</th>
        </Header>
        <Row>
            <!-- by default called context -->
            <td>@context.Date</td>
            <td>@context.TemperatureC</td>
            <td>@context.TemperatureF</td>
            <td>@context.Summary</td>
        </Row>
        <Footer>
        <td colspan="4">Spring is in the air!</td>
        </Footer>
    </Grid>
}

@code {
    private WeatherForecast[]? forecasts;
    private RenderFragment<WeatherForecast> forecastTemplate = (forecast) =>@<span>@forecast.Summary</span>;

protected override async Task OnInitializedAsync()
{
//forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
forecasts = new WeatherForecast[]
{
            new WeatherForecast()
            {
                Date = DateTime.Now,
                TemperatureC = -17,
                Summary = "Sunny"
            },
            new WeatherForecast()
            {
                Date = DateTime.Now.AddDays(1),
                TemperatureC = 20,
                Summary = "Sunny"
            },
                        new WeatherForecast()
            {
                Date = DateTime.Now.AddDays(2),
                TemperatureC = 33,
                Summary = "Sunny"
            }
                                                };
}
}
